import React, { useState } from 'react';
import axios from 'axios';
import { API_URL } from '../config' 

function TestPanel() {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const [selectedFile, setSelectedFile] = useState(null);
    // –í—ã–≤–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const [previewUrl, setPreviewUrl] = useState(null);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ  –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const [invertedImage, setInvertedImage] = useState(null);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const [isLoading, setIsLoading] = useState(false);
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const [error, setError] = useState(null);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const handleFileChange = (event) => {
        const file = event.target.files[0];
        setSelectedFile(file);
        setInvertedImage(null);
        setError(null);

        // –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º, —Ç–æ –º—ã –≤–∏–∑—É–∞–ª–∏–∑—É—Ä–µ—É–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setPreviewUrl(reader.result);
            };
            reader.readAsDataURL(file);
        } else {
            setPreviewUrl(null);
        }
    };

    const handleSubmit = async (event) => {
        event.preventDefault();

        try {
            // –°—Ç–∞–≤–∏–º –∑–∞–≥—Ä—É–∑–∫—É
            setIsLoading(true);
            setError(null);

            const response = await axios.post(`${API_URL}/model/${selectedOption.toLowerCase()}/run`, {
                base64_image: previewUrl,
                conf: sliderValueConf,
                iou: sliderValueIou,
                max_det: sliderValueDet,
            }, {
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–º
            const processedImage = response.data.data.base64_image;
            setInvertedImage(processedImage);
        } catch (err) {
            console.error(err);
            setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
        } finally {
            setIsLoading(false);
        }
    };
    // –î–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const [selectedOption, setSelectedOption] = useState('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å');


    const toggleDropdown = () => {
        setIsDropdownOpen(!isDropdownOpen);
    };

    const selectOption = (option) => {
        setSelectedOption(option);
        setIsDropdownOpen(false);
    };
    const [sliderValueConf, setSliderValueConf] = useState(0.4); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
    const [sliderValueIou, setSliderValueIou] = useState(0.2); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
    const [sliderValueDet, setSliderValueDet] = useState(10); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
    
    return (
        <div class='intro'>
            <h3 class="h3">
                üî• –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É –º–æ–¥–µ–ª—å üî•
            </h3>
            <hr />
            <br />
            <div class='container'>
                <form onSubmit={handleSubmit} className='form'>
                    <div className="dropdown">
                        <button type="button" onClick={toggleDropdown} className="btn-test">
                            {selectedOption}
                        </button>
                        {isDropdownOpen && (
                            <ul className="dropdown-menu">
                                <li onClick={() => selectOption('Fire')}>Fire</li>
                                <li onClick={() => selectOption('Smoke')}>Smoke</li>
                                <li onClick={() => selectOption('All')}>All</li>
                            </ul>
                        )}
                    </div>
                    <div className="slider-container">
                        <label htmlFor="slider">Confidence:</label>
                        <input
                            type="range"
                            id="slider"
                            min="0.0"
                            max="1.0"
                            step='0.1'
                            value={sliderValueConf}
                            onChange={(e) => setSliderValueConf(e.target.value)}
                            className="slider"
                        />
                        <span className="slider-value">{sliderValueConf}</span>
                    </div>
                    <div className="slider-container">
                        <label htmlFor="slider">IOU:</label>
                        <input
                            type="range"
                            id="slider"
                            min="0.0"
                            max="1.0"
                            step='0.1'
                            value={sliderValueIou}
                            onChange={(e) => setSliderValueIou(e.target.value)}
                            className="slider"
                        />
                        <span className="slider-value">{sliderValueIou}</span>
                    </div>
                    <div className="slider-container">
                        <label htmlFor="slider">Max detections:</label>
                        <input
                            type="range"
                            id="slider"
                            min="1"
                            max="50"
                            step='1'
                            value={sliderValueDet}
                            onChange={(e) => setSliderValueDet(e.target.value)}
                            className="slider"
                        />
                        <span className="slider-value">{sliderValueDet}</span>
                    </div>
                    <input
                        type="file"
                        id="file-input"
                        accept="image/*"
                        onChange={handleFileChange}
                        className="file-input"
                    />
                    <label htmlFor="file-input" className="file-label">
                        {/* // –í–∑–∞–≤–∏—Å–º–∏—Å–æ—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ª–∞–π–±–ª–∞ —É —Ñ–æ—Ä–º—ã */}
                        {selectedFile ? selectedFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
                    </label>
                    <button type="submit" className="btn-test" disabled={isLoading}>
                        {/* // –í–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É –∫–Ω–æ–ø–∫–∏ */}
                        {isLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                    </button>

                </form>
                <div class='images-wrapper'>
                    {/* // –ï—Å–ª–∏ –∑–∞–∫–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ */}
                    {previewUrl && (
                        <div class='image-container3'>
                            <span className='text'>–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
                            <hr />
                            <img src={previewUrl} className='image2' />
                        </div>
                    )}
                    {/* –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ   */}
                    {invertedImage && (
                        <div class='image-container3'>
                            <span className='text'>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
                            <hr />
                            <img src={invertedImage} className='image2' />
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default TestPanel;
